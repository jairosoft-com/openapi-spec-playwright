openapi: 3.1.1
info:
  title: Sample API
  description: A sample API for testing with Prism mock server
  version: 1.0.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  contact:
    name: API Support
    email: support@example.com
servers:
  - url: http://127.0.0.1:4010
    description: Mock server
security:
  - bearerAuth: []
paths:
  /users:
    get:
      summary: Get all users
      description: Retrieve a list of all users
      operationId: getUsers
      tags:
        - Users
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new user
      description: Create a new user with the provided information
      operationId: createUser
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{id}:
    get:
      summary: Get user by ID
      description: Retrieve a specific user by their ID
      operationId: getUserById
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update user
      description: Update an existing user's information
      operationId: updateUser
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete user
      description: Delete a user by their ID
      operationId: deleteUser
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /todos:
    get:
      summary: Get all todos
      description: Retrieve a list of all todos
      operationId: getTodos
      tags:
        - Todos
      parameters:
        - name: completed
          in: query
          description: Filter by completion status
          required: false
          schema:
            type: boolean
        - name: userId
          in: query
          description: Filter by user ID
          required: false
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Todo'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new todo
      description: Create a new todo item
      operationId: createTodo
      tags:
        - Todos
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTodoRequest'
      responses:
        '201':
          description: Todo created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /todos/{id}:
    get:
      summary: Get todo by ID
      description: Retrieve a specific todo by its ID
      operationId: getTodoById
      tags:
        - Todos
      parameters:
        - name: id
          in: path
          required: true
          description: Todo ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '404':
          description: Todo not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update todo
      description: Update an existing todo item
      operationId: updateTodo
      tags:
        - Todos
      parameters:
        - name: id
          in: path
          required: true
          description: Todo ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTodoRequest'
      responses:
        '200':
          description: Todo updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '404':
          description: Todo not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete todo
      description: Delete a todo by its ID
      operationId: deleteTodo
      tags:
        - Todos
      parameters:
        - name: id
          in: path
          required: true
          description: Todo ID
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Todo deleted successfully
        '404':
          description: Todo not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the user
        email:
          type: string
          format: email
          description: User's email address
        name:
          type: string
          description: User's full name
        createdAt:
          type: string
          format: date-time
          description: When the user was created
        updatedAt:
          type: string
          format: date-time
          description: When the user was last updated
      required:
        - id
        - email
        - name
        - createdAt
        - updatedAt
    CreateUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User's email address
        name:
          type: string
          description: User's full name
      required:
        - email
        - name
    UpdateUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User's email address
        name:
          type: string
          description: User's full name
    Todo:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the todo
        title:
          type: string
          description: Todo title
        completed:
          type: boolean
          description: Whether the todo is completed
        userId:
          type: string
          format: uuid
          description: ID of the user who owns this todo
        createdAt:
          type: string
          format: date-time
          description: When the todo was created
        updatedAt:
          type: string
          format: date-time
          description: When the user was last updated
      required:
        - id
        - title
        - completed
        - userId
        - createdAt
        - updatedAt
    CreateTodoRequest:
      type: object
      properties:
        title:
          type: string
          description: Todo title
        userId:
          type: string
          format: uuid
          description: ID of the user who owns this todo
        completed:
          type: boolean
          default: false
          description: Whether the todo is completed
      required:
        - title
        - userId
    UpdateTodoRequest:
      type: object
      properties:
        title:
          type: string
          description: Todo title
        completed:
          type: boolean
          description: Whether the todo is completed
    Pagination:
      type: object
      properties:
        page:
          type: integer
          description: Current page number
        limit:
          type: integer
          description: Number of items per page
        total:
          type: integer
          description: Total number of items
        totalPages:
          type: integer
          description: Total number of pages
      required:
        - page
        - limit
        - total
        - totalPages
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
        code:
          type: string
          description: Error code
        details:
          type: object
          description: Additional error details
      required:
        - error
        - code
tags:
  - name: Users
    description: User management operations
  - name: Todos
    description: Todo management operations
